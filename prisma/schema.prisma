// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now())
  credits Int @default(0)

  // Relations
  ideas Idea[]
  reviews Review[]
  creditEvents CreditHistory[]
}


model Idea {
  id String @id @default(uuid())
  title String 
  briefDescription String?
  problem String
  solution String
  authorId String
  categories String[]


  pricingModel String
  pricingDetails String
  author User @relation(fields: [authorId], references: [id])
  reviews Review[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}


model Review {
  id String @id @default(uuid())
  rating Float
  comment String?
  biggestRisk String?
  competitors String?
  wouldIPayForThis String?
  ideaId String
  userId String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Relations

  idea Idea @relation(fields: [ideaId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, ideaId]) // prevent duplicate reviews by same user on one idea
}


model CreditHistory {
  id String @id @default(uuid())
  userId String
  amount Int
  reason CreditReason

  metadata String? // Optional: details (e.g., "3rd review", "Stripe session ID", etc.)
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
}

enum PlanTier {
  FREE
  PRO
}



enum CreditReason {
  PURCHASE
  REVIEW_REWARD
  MANUAL_ADJUSTMENT
  REDEMPTION
}