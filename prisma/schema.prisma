// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  credits   Int      @default(0) // optional: use if you prefer to persist balance

  // Relations
  ideas         Idea[]
  reviews       Review[]
  creditEvents  CreditHistory[]
  purchases     Purchase[]
}

model Idea {
  id                String   @id @default(uuid())
  title             String
  briefDescription  String
  problemItSolves   String
  authorId          String
  categories        String[]
  pricingModel      String
  pricingDetails    String
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())

  // Relations
  author User   @relation(fields: [authorId], references: [id])
  reviews Review[]
}

model Review {
  id               String   @id @default(uuid())
  rating           Float
  comment          String
  whatILike        String
  whatIDislike     String
  wouldIPayForThis String
  suggestions      String
  ideaId           String
  userId           String
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())

  // Relations
  idea Idea @relation(fields: [ideaId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, ideaId]) // prevent duplicate reviews by same user on one idea
}

model CreditHistory {
  id        String       @id @default(uuid())
  userId    String
  amount    Int          // always positive
  type      CreditType   // CREDIT or DEBIT
  reason    CreditReason
  metadata  String?      // e.g. "Stripe session ID", "10th review", etc.
  createdAt DateTime     @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Purchase {
  id              String   @id @default(uuid())
  userId          String
  stripeSessionId String   @unique
  amountPaid      Int      // in cents
  creditsGranted  Int
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum CreditReason {
  PURCHASE
  REVIEW_REWARD
  MANUAL_ADJUSTMENT
  REDEMPTION
}

enum CreditType {
  CREDIT
  DEBIT
}
